<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bebop.Monads</name>
    </assembly>
    <members>
        <member name="T:Bebop.Monads.IMaybe">
            <summary>
            Basic interface of the Maybe monad.
            This interface is usefull when accessing Maybes in a
            non-generic fashion, e. g. when processing lists of Maybes.
            </summary>
        </member>
        <member name="P:Bebop.Monads.IMaybe.HasValue">
            <summary>
            Returns 'True' if this <see cref="T:Bebop.Monads.IMaybe"/> has a value,
            'False' otherwise.
            </summary>
        </member>
        <member name="P:Bebop.Monads.IMaybe.InternalType">
            <summary>
            Gets the <see cref="T:System.Type"/> argument the underlying <see cref="T:Bebop.Monads.Maybe`1"/> 
            was created with.
            </summary>
        </member>
        <member name="M:Bebop.Monads.IMaybe.GetValueOrDefault">
            <summary>
            Gets the internal value of this <see cref="T:Bebop.Monads.IMaybe"/>,
            or the default value if this <see cref="T:Bebop.Monads.IMaybe"/> is empty.
            </summary>
        </member>
        <member name="P:Bebop.Monads.IMaybe.Value">
            <summary>
            Gets the internal value of this <see cref="T:Bebop.Monads.IMaybe"/>. 
            This property should only be queried after making sure that this
            <see cref="T:Bebop.Monads.IMaybe"/> has a value by checking the <see cref="P:Bebop.Monads.IMaybe.HasValue"/> 
            property! The exact return value for an empty <see cref="T:Bebop.Monads.IMaybe"/> 
            depends on the internal implementation and remains hereby unspecified.
            </summary>
        </member>
        <member name="T:Bebop.Monads.IMaybe`1">
            <summary>
            This interface provides covariance for <see cref="T:Bebop.Monads.Maybe`1"/>.
            Note: since <see cref="T:Bebop.Monads.Maybe`1"/> is a value type, calling methods
            via this interface introduces boxings!
            </summary>
        </member>
        <member name="M:Bebop.Monads.IMaybe`1.GetValueOrDefault">
            <summary>
            Gets the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or the default value if this <see cref="T:Bebop.Monads.IMaybe`1"/> is empty.
            </summary>
        </member>
        <member name="P:Bebop.Monads.IMaybe`1.Value">
            <summary>
            Gets the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>. 
            This property should only be queried after making sure that this
            <see cref="T:Bebop.Monads.IMaybe`1"/> has a value by checking the <see cref="P:Bebop.Monads.IMaybe.HasValue"/> 
            property! The exact return value for an empty <see cref="T:Bebop.Monads.IMaybe`1"/> 
            depends on the internal implementation and remains hereby unspecified.
            </summary>
        </member>
        <member name="M:Bebop.Monads.IMaybe`1.Map``1(System.Func{`0,Bebop.Monads.Maybe{``0}})">
            <summary>
            Applies the given <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.IMaybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.IMaybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.IMaybe`1.Map``1(System.Func{`0,System.Threading.Tasks.Task{Bebop.Monads.Maybe{``0}}})">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.IMaybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.IMaybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.IMaybe`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.ValueTask{Bebop.Monads.Maybe{``0}}})">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.IMaybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.IMaybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.IMaybe`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.Task{Bebop.Monads.Maybe{``0}}})">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.IMaybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.IMaybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="T:Bebop.Monads.Maybe">
            <summary>
            A factory for creating 'Maybe' instances.
            </summary>
        </member>
        <member name="T:Bebop.Monads.Maybe.Castable">
            <summary>
            Provides non-generic mechanisms to create instances of <see cref="T:Bebop.Monads.IMaybe"/> that are
            down-castable to <see cref="T:Bebop.Monads.Maybe`1"/>. This is done by using Reflection. The methods are 
            significantly slower than what is provided by <see cref="M:Bebop.Monads.Maybe.From(System.Type,System.Object)"/> and
            <see cref="M:Bebop.Monads.Maybe.Nothing(System.Type)"/>.
            Instances created with <see cref="M:Bebop.Monads.Maybe.From(System.Type,System.Object)"/> or <see cref="M:Bebop.Monads.Maybe.Nothing(System.Type)"/>
            are not down-castable to <see cref="T:Bebop.Monads.Maybe`1"/> because they return a different implementation 
            that only satisfies the <see cref="T:Bebop.Monads.IMaybe"/> interface.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.Castable.Nothing(System.Type)">
            <summary>
            Creates an empty <see cref="T:Bebop.Monads.Maybe`1"/>.
            This instance is created via <see cref="M:System.Activator.CreateInstance(System.Type)"/>
            and is directly castable to a <see cref="T:Bebop.Monads.Maybe`1"/>. This is in contrast to what
            <see cref="M:Bebop.Monads.Maybe.Nothing(System.Type)"/> produces, which only satisfies the <see cref="T:Bebop.Monads.IMaybe"/>
            interface but has different implementation.
            This method is significantly slower than <see cref="M:Bebop.Monads.Maybe.Nothing(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.Castable.From(System.Type,System.Object)">
            <summary>
            Creates an <see cref="T:Bebop.Monads.Maybe`1"/> instance that contains the given <paramref name="value"/>.
            This instance is created via <see cref="M:System.Activator.CreateInstance(System.Type)"/>
            and is directly castable to a <see cref="T:Bebop.Monads.Maybe`1"/>. This is in contrast to what
            <see cref="M:Bebop.Monads.Maybe.From(System.Type,System.Object)"/> produces, which only satisfies the <see cref="T:Bebop.Monads.IMaybe"/>
            interface but has different implementation.
            This method is significantly slower than <see cref="M:Bebop.Monads.Maybe.From(System.Type,System.Object)"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.Nothing``1">
            <summary>
            Creates an empty <see cref="T:Bebop.Monads.Maybe`1"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.Nothing(System.Type)">
            <summary>
            Creates an empty <see cref="T:Bebop.Monads.IMaybe"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.From``1(``0@)">
            <summary>
            Creates a <see cref="T:Bebop.Monads.Maybe`1"/> instance that contains the given <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe.From(System.Type,System.Object)">
            <summary>
            Creates an <see cref="T:Bebop.Monads.IMaybe"/> instance that contains the given <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Bebop.Monads.MaybeNongeneric.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:Bebop.Monads.Maybe`1">
            <summary>
            Maybe monad of T.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.op_Implicit(`0)~Bebop.Monads.Maybe{`0}">
            <summary>
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Equals(Bebop.Monads.Maybe{`0})">
            <summary>Indicates whether the current object is equal to another
            object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the
            <paramref name="other">other</paramref> parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Equals(Bebop.Monads.IMaybe)">
            <summary>Indicates whether the current object is equal to another
            object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the
            <paramref name="other">other</paramref> parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object
            are equal.</summary>
            <param name="obj">The object to compare with the current
            instance.</param>
            <returns>true if <paramref name="obj">obj</paramref> and this
            instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for
            this instance.</returns>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.op_Equality(Bebop.Monads.Maybe{`0},Bebop.Monads.Maybe{`0})">
            <summary>
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.op_Inequality(Bebop.Monads.Maybe{`0},Bebop.Monads.Maybe{`0})">
            <summary>
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Bebop#Monads#IMaybe{T}#GetValueOrDefault">
            <summary>
            Gets the internal value of this <see cref="T:Bebop.Monads.IMaybe`1"/>,
            or the default value if this <see cref="T:Bebop.Monads.IMaybe`1"/> is empty.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Map``1(System.Func{`0,Bebop.Monads.Maybe{``0}}@)">
            <summary>
            Applies the given <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.Maybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.Maybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.Maybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.Map``1(System.Func{`0,System.Threading.Tasks.Task{Bebop.Monads.Maybe{``0}}}@)">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.Maybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.Maybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.Maybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.ValueTask{Bebop.Monads.Maybe{``0}}}@)">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.Maybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.Maybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.Maybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.MapAsync``1(System.Func{`0,System.Threading.Tasks.Task{Bebop.Monads.Maybe{``0}}}@)">
            <summary>
            Applies the given async <paramref name="binder"/> to the internal value of this <see cref="T:Bebop.Monads.Maybe`1"/>,
            or returns an empty <see cref="T:Bebop.Monads.Maybe`1"/> (of the target type) if this <see cref="T:Bebop.Monads.Maybe`1"/>
            is empty.
            </summary>
            <param name="binder">A non-null binder.</param>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.OrElse(`0)">
            <summary>
            Returns the internal value or <paramref name="alternative"/>
            if this <see cref="T:Bebop.Monads.Maybe`1"/> is Nothing.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.OrElse(System.Func{`0})">
            <summary>
            Returns the internal value or constructs an alternative
            via the <paramref name="alternativeFactory"/> if this
            <see cref="T:Bebop.Monads.Maybe`1"/> is Nothing.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.OrElseAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Returns the internal value or constructs an alternative
            via the <paramref name="alternativeFactory"/> if this
            <see cref="T:Bebop.Monads.Maybe`1"/> is Nothing.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.OrElseAsync(System.Func{System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Returns the internal value or constructs an alternative
            via the <paramref name="alternativeFactory"/> if this
            <see cref="T:Bebop.Monads.Maybe`1"/> is Nothing.
            </summary>
        </member>
        <member name="M:Bebop.Monads.Maybe`1.ToString">
            <summary>
            </summary>
        </member>
    </members>
</doc>
